<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ⭐️ The Minimalist Book</title>
    <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/</link>
    <description>Recent content in Posts on ⭐️ The Minimalist Book</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://pythonhacker24.github.io/minimalistbook-blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Best Way to Learn a New Programming Language from Scratch - How I Approach and Learn Any Programming Language Efficiently</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/how_to_learn_a_new_programming_language/</link>
      <pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/how_to_learn_a_new_programming_language/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Preface:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;The following article is based on my experiences and opinions on learning programming languages. I have been learning about computers in-depth and find learning languages with specific purposes useful. For example, Python was for beginning, C is for memory management and Rust is for learning to write memory-safe code in my case. This time, I started learning Golang which is known for its simple syntax and powerful performance, and widely known for its awesome concurrency. This time, I considered documentation on how I approach new programming languages when I have a requirement, such as for projects or work-related purposes. Note that your experiences and opinions may vary; I greatly respect that.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why More is Not Always Good in Terms of Software - Words on Cross Platform Utilities, Bash-ism, and POSIX Compliance. </title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/why_more_is_not_always_good/</link>
      <pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/why_more_is_not_always_good/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Preface:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;This article is about my views on software compliance and cross-platform support, and reflects my opinions and experience with the subject. Your experience and opinions may vary, which I respect.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-i-am-specifically-talking-about&#34;&gt;What I am Specifically Talking About?&lt;/h2&gt;&#xA;&lt;p&gt;I am going to talk about the issues caused by non-compliant software and why more features are not always good, especially in the case of the upgrade of tools on a single platform.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why I Shifted From Arch Linux to Debian Linux?</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/why_i_shifted_from_arch_to_debian/</link>
      <pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/why_i_shifted_from_arch_to_debian/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Preface:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;The following article is based on my personal experience with Arch Linux and Debian Linux. While I appreciate both distributions for their unique strengths and different use cases, the information provided reflects my own opinions and experiences. Your experiences may vary.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-was-i-going-for-initially&#34;&gt;What was I going for Initially?&lt;/h2&gt;&#xA;&lt;h3 id=&#34;bit-of-my-story-as-a-beginner-linux-user&#34;&gt;Bit of my Story as a Beginner Linux User&lt;/h3&gt;&#xA;&lt;p&gt;When I started using Linux, I was going through security stuff and learning computer security when I was in my High School. At that time, I used to work with Kali Linux and that’s what I understood about Linux. I used to spent a lot of time on the terminal working with networking stuff, writing tools with Python, using pre-build tools to understand security, etc. and it was awesome. I was using the GNOME environment on Kali and eventually I shifted to XFCE (I prefer this for beginners). And to be honest, I knew nothing about desktop environments or I was no particularly interested in making my desktop look cooler than the default layout.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tmux is the Ultimate Choice for Power Users - An Awesome Terminal Multiplexer for Managing Persistent Sessions</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/tmux_is_the_ultimate_choice_for_power_users/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/tmux_is_the_ultimate_choice_for_power_users/</guid>
      <description>&lt;h2 id=&#34;what-is-tmux&#34;&gt;What is Tmux?&lt;/h2&gt;&#xA;&lt;p&gt;Tmux is a Terminal Multiplexer Application for Linux and MacOS for managing terminal sessions and Windows. It is to be mentioned that Tmux is not a terminal emulator, instead, it’s a terminal application, a binary that allows you to stay productive over your terminal. It doesn’t matter which terminal emulator you are using (although I recommend the Suckless Terminal). The functionality of managing Windows and the session doesn’t happen on the desktop GUI side but on the terminal session, you are working with.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Concept of RSS Feed - A Reliable Way for Publishers and Subscribers Model</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/concept_of_rss_feed/</link>
      <pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/concept_of_rss_feed/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;!-- raw HTML omitted --&gt;Preface:&lt;!-- raw HTML omitted --&gt; I have been looking for simple solutions in nearly everything related to computing. A lot of software designed these days is not designed per your requirements but as per companies&amp;rsquo; profit. Hence, most of these solutions end up sucking your time and energy and need to be replaced by more optimised solutions that would boost your productivity in the right way. RSS Feed is something that I found after searching for solutions related to subscribing to websites or creators without sucking much resources and design that is reliable to the user itself.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Breaking RSA Encryption on Hardware Devices with Side Channel Power Analysis — Leaking the Private Key by Exploiting Square-Multiply Algorithm</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/breaking_rsa_encryption_on_hardware_devices_with_side_channel_power_analysis/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/breaking_rsa_encryption_on_hardware_devices_with_side_channel_power_analysis/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;!-- raw HTML omitted --&gt;Preface:&lt;!-- raw HTML omitted --&gt; This article is about leaking the private key from hardware devices that implement RSA encryption which is part of hardware hacking. The author is not responsible for any damage caused by the given information. It is recommended to be careful while performing these attacks as they can damage the hardware or even destroy it. All the information provided here is for educational purposes. There are no such prerequisites for understanding the theory, although knowledge about modular arithmetic, basics of encryption mathematics, basic electronics, etc. is recommended to carry out these attacks practically. Rest of all, hacking is about learning and having fun, so enjoy the cool attacks!&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serious Reconnaissance with Unmanned Aerial Vehicles — Mapping Out Devices in an Area with Drones</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/serious_reconnaissance_with_unmaned_aerial_vechiles/</link>
      <pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/serious_reconnaissance_with_unmaned_aerial_vechiles/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;!-- raw HTML omitted --&gt;Introduction:&lt;!-- raw HTML omitted --&gt; The following content is for educational purposes and for hackers living in basements knowing enough ethics. The author is not responsible for any damage caused by the knowledge provided here and does not support anything like that. It’s essential to check out the rules in the area of reconnaissance about the tactics provided here and the use of materials (unless and until there is any apocalypse and a solid recon is required). Rest assured, using drones and hacking techniques is awesome!&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Fundamentals of Hardware Hacking — Breaking and Reverse Engineering Smart IoT Devices</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/fundamentals_of_hardware_hacking/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/fundamentals_of_hardware_hacking/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;!-- raw HTML omitted --&gt;Disclaimer —&lt;!-- raw HTML omitted --&gt; This is an introductory article about Hardware Hacking and Security of IoT Devices. None of the mentioned information or techniques are intended for any illegal purposes and the author is not responsible for any damage. It’s advisable to experiment on devices that you own or have explicit permission to do so. Rest of all, hardware hacking is fun!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-beauty-of-electronic-devices&#34;&gt;The Beauty of Electronic Devices&lt;/h2&gt;&#xA;&lt;p&gt;In the ever-growing world of smart devices and the connectivity of things to the internet, life has become more convenient than ever. Advancements in electronics and microprocessors unlocked infinite potential for developing devices that have become basic needs to survive the economy. Homes and cars became smart enough to make decisions as well as make suggestions to the user. Things that were supposed to be in fantasy books are now absolute essentials of every day. Anything less than that is considered to be outdated or underdeveloped.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting Up a Remote Git Server — A Simple and Concise Step-by-Step Guide to Host a Private Git Server</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/setting_up_remote_git_server/</link>
      <pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/setting_up_remote_git_server/</guid>
      <description>&lt;p&gt;&lt;em&gt;Preface: This is a concise and simple guide to hosting a remote git server. I have been researching this topic for a while and came up with the idea of writing an article with a step-by-step guide for hosting a private git server. Covering all the aspects of git is not possible in a single article, so it’s assumed that the reader has prior knowledge of git and version control.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Nature of Linux Kernel Development — Difference Between Rules of Kernel Level and User-Space Application Level</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/nature_of_linux_kernel_development/</link>
      <pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/nature_of_linux_kernel_development/</guid>
      <description>&lt;p&gt;&lt;em&gt;Preface: This article is intended to explain a clear distinction between the core principles of Linux Kernel Development and User-Application Level Development. The provided information is based on my research on Kernel Development through various sources and I have tried to make it as accurate as possible. Efforts have been made to explain it as simply and concisely as possible.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction-to-the-nature-of-linux-kernel&#34;&gt;Introduction to the Nature of Linux Kernel&lt;/h2&gt;&#xA;&lt;p&gt;Linux Kernel is the abstraction layer between the Operating System and the Hardware in the system. While most User-Application Developers are familiar with standard ways of application development, they reside in the comfort of the Operating System and often underestimate the features provided by it. Since the Linux Kernel goes deep down to the low level, it does not have such support for convenience. There is no definition of those aspects! For example, usually, &lt;code&gt;printf&lt;/code&gt; would be used for printing messages generated by the software. These are usually built-in functions and need to be imported from some external dependencies. But in the case of Kernel, there are no external dependencies! or even the definition of it. Since &lt;code&gt;printf&lt;/code&gt; prints messages in the console (your terminal), there is no console-like thing in a bare metal system. Hence, development at such a low level is different from the usual application-level development. It’s not difficult or tedious, it’s different. I would like to present a perspective on this in the next section.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Process Scheduling — The Reason your Linux System Processes so Efficiently (Kernel Perspective)</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/linux_process_scheduling/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/linux_process_scheduling/</guid>
      <description>&lt;p&gt;&lt;em&gt;Preface: I was going through the book “Linux Kernel Development” by Robert Love, one of the best books I have referred to for low-level stuff and understanding the workings of Linux. I study this book with intensity, simplify the concepts and write it down here so that the readers can get a straightforward description and all they need to know about the topic. Covering the whole Linux Process Scheduling is not possible and is not the goal of this article. It’s to let you know the topic in more depth than a summary can provide and create a pathway you need to go to learn the topic.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Processes — A Kernel’s Perspective Explained with Clarity and Simplicity</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/linux_processes/</link>
      <pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/linux_processes/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;!-- raw HTML omitted --&gt;Preface:&lt;!-- raw HTML omitted --&gt; I have been going through the book “Linux Kernel Development” by Robert Love which I highly recommend for understanding the Linux Kernel in depth. I decided to write this article to explain “Linux Processes” simply and concisely. The topic itself is broad and is not explained into the deepest of it, but essential for Linux Administrators, Developers and even Linux users to appreciate the beauty of the Kernel they make use of every day.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>NGINX for Deploying Next.js Application on AWS EC2 with AWS ELB — Control and Stability of Deployments</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/nginx_for_deploying_nextjs_application_on_aws/</link>
      <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/nginx_for_deploying_nextjs_application_on_aws/</guid>
      <description>&lt;p&gt;&lt;em&gt;I was looking for an article like this a few days ago, which I didn’t find at that time, so I did the deployment on my own and came up with this article to prevent other developers from saving those efforts and focusing on development. I am not explaining every single step and have provided links for references.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;I prefer manual deployment of applications over automated (and even serverless) methods. Although they are convenient and require less effort by the developers, they are bound to the providers and offer less control over the underlying system. It’s an absolute necessity that the systems work as the developer (or a team in the organisation) wants it to, and not more than that. Often, more in this situation means more pricing which is considered for a long period can sum up to a huge amount, and even that functionality may not be that good enough or even required.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configuring and Building the Linux Kernel — Absolute Guide to Compiling Your Kernel</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/configuring_and_building_the_linux_kernel/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/configuring_and_building_the_linux_kernel/</guid>
      <description>&lt;p&gt;Linux Kernel is an Open-Source Software and the user is free to modify and customise it as per the requirements. The modification of the Kernel requires a deep understanding of the working of the Kernel, although patches are available to make the Kernel optimised for specific hardware. Linux Kernel Source Code has various options to configure the drivers, modules, preferences on hardware options, etc. This part can be studied by the user and is pretty much easy to work with. The confusing part, however, is building the Kernel.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Elegance of the Linux Kernel — A Concise History of Unix and the Creation of the Linux Kernel</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/elegance_of_the_linux_kernel/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/elegance_of_the_linux_kernel/</guid>
      <description>&lt;h2 id=&#34;introduction-and-context&#34;&gt;Introduction and Context&lt;/h2&gt;&#xA;&lt;p&gt;I was going through the book “Linux Kernel Development” by Robert Love, an absolute guide to getting started with Linux Kernel Development and a highly recommended book for understanding the core of the Linux Kernel. Linux Kernel has been one of the most important software ever written and is even considered one of the biggest projects ever undertaken by a single person. The idea of the Linux Kernel was initiated by Linus Torvalds, a student from the University of Helsinki and is maintained by him to date (while writing this article). The roots of Linux however originate from the Unix Operating System and adopt the very necessary principle on which the Unix Operating System was based. To understand the development of the Linux Kernel, a pinch of history about Unix is necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Shell Scripting — A Suckless and Concise Guide to the Command-line of Linux</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/linux_shell_scripting/</link>
      <pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/linux_shell_scripting/</guid>
      <description>&lt;p&gt;&lt;em&gt;Prior Statements: This is a concise guide on the Linux Shell Scripting while consolidating all the facts about the Linux Shell for quick developer’s reference while using Linux. I am referencing the Bash (Bourne-Again Shell) which is the default shell for Linux-based systems. I will also be providing references and external links to dive into depth and not fill the article with too much explanation about a single topic which is not universally required by all the readers. Bash Scripting is a vast topic and cannot be covered in a single article. I will be providing the very basics here and providing references to external links to learn more.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Suckless Utilities for Arch Linux — The Most Minimal Way Run a Computer</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/suckless_utilities_for_arch_linux/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/suckless_utilities_for_arch_linux/</guid>
      <description>&lt;p&gt;Suckless utilities have been my favourite at this time and kind of essentials for my use of the computer. I have been using Arch Linux for a fair amount of time now and I started using it with XFCE for few weeks. I would appreciate the XFCE desktop environment for it’s smoothness and light-weight nature with works really fine when newly shifting on Arch Linux. But then I learnt the suckless ecosystem and eventually shifted to it as my full-time environment. The customisation of Suckless takes a bit of time in the beginning and is a process that you would learn slowly and eventually as you use it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing Pacman in Arch Linux — When You Blow it Up</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/installing_pacman_in_arch_linux/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/installing_pacman_in_arch_linux/</guid>
      <description>&lt;p&gt;Let me suckless and divide the article into two parts:&lt;/p&gt;&#xA;&lt;p&gt;My story how I blew up Pacman Package Manager&#xA;How to reinstall the Pacman Package Manager&#xA;If you only care about the second part, skip the first one.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-scenario--blow-it-up&#34;&gt;The Scenario — Blow it Up&lt;/h2&gt;&#xA;&lt;p&gt;I was trying to install the pacman game from the Internet to get it running on my Arch Linux Terminal (I use Suckless Terminal BTW). When I got it installed and played it, it was super awesome. It was fun to the point that I decided to add it to my /usr/bin directory to make it my usual command and play it whenever I want. This is where I messed up and replaced the Pacman Package Manager binary with the Pacman Game binary. And now I ended up losing it and unable to update or install anything to my system and enabled me to play a Pacman Game.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Boot Process of Computers — A Learner’s Perspective Of Exploring the Depth of Computers</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/boot_process_of_computers/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/boot_process_of_computers/</guid>
      <description>&lt;p&gt;&lt;em&gt;Prior Clarifications: Here, I will be providing a philosophical explanation about the bootloaders and understanding them in a simple and as minimal way as possible. This is not supposed to be a manual for bootloader or provide any advice for experimenting over your live system. It’s my journey to understand computers (one of the most complex creations of mankind) and I will be stating my thoughts. Take it with a pinch of salt.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Networking Fundamentals for Linux Administrators — A Suckless and Concise Explanation</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/networking_fundamentals_for_linux_administrators/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/networking_fundamentals_for_linux_administrators/</guid>
      <description>&lt;p&gt;Statistics are clear on the fact that &lt;strong&gt;96.3%&lt;/strong&gt; (while writing this article) of the servers use Linux as their Operating System which is no doubt what every other Linux user on this Earth expects. I believe that the Linux Administrator has to take the shot about the configuration of Networking in Linux Based Server. Some of the underlying concepts remain the same for any other distros but it is mainly intended for Linux.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Operating Systems and Low-Level Access to the Hardware — Why should you learn it?</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/operating_systems_and_low_level_access_to_the_hardware/</link>
      <pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/operating_systems_and_low_level_access_to_the_hardware/</guid>
      <description>&lt;p&gt;Today, I completed the whole read of the book &lt;strong&gt;“Linux Kernel in a Nutshell” by Greg Kroah-Hartman&lt;/strong&gt; and I highly recommend that you go through it if you want to understand how to build your custom configuration of Linux Kernel and all you need to know about all the nuts and bolts. It’s always great to have such handbooks around the desk.&lt;/p&gt;&#xA;&lt;p&gt;This blog is about why it’s so awesome to look into the operating system you are using with your hardware and why have a grasp on the Low-Level aspects of a computer. I am going to go philosophical in this blog about the reasoning behind why to leave what you are doing and explore under the hood of things around you. When I say computers, it’s not bound to something like a Laptop or Desktop but comprises a whole lot of things that you have lying around. Like your Wireless Access Point (commonly called a wireless router), most probably it’s the case that it is running a whole Linux-based Operating System in it. Owning something might be easy but having an insight into how it functions is something amazing. When you spend a lot of time figuring out all of this, it becomes extremely obvious about how they work rather than the complexity that we predict while accessing these things.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arch Linux Custom Builds — Freedom of the Operating System</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/arch_linux_custom_builds/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/arch_linux_custom_builds/</guid>
      <description>&lt;p&gt;While writing this blog, I was reading the book “Linux Kernel in a Nutshell” by Greg Kroab-Hartman and as far as the pages of the book are concerned, it seems to be a two-day read (this is a handbook so reading it once and having around the desk is super useful). By the way, the author has the book left open for download &lt;a href=&#34;http://www.kroah.com/lkn/&#34;&gt;http://www.kroah.com/lkn/&lt;/a&gt; so check that out if you want to follow up. I love reading physical books but having a soft copy of a book in the system is handy especially when it is a handbook. While reading this book, I was amazed by the fact that the Linux Kernel has about 2000 configurations that you can make to mould that Kernel as per your requirements. Which is yes, a lot when compared to firing up a Ubuntu USB medium and installing the device.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bypassing the Linux Login to access the files (with Physical Access), even the root!</title>
      <link>https://pythonhacker24.github.io/minimalistbook-blog/posts/bypass_the_linux_login_to_access_the_files/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://pythonhacker24.github.io/minimalistbook-blog/posts/bypass_the_linux_login_to_access_the_files/</guid>
      <description>&lt;p&gt;Imagine being away from the computer for a couple of minutes and getting to know that the system has been compromised and a backdoor has been installed into the system. “The system was locked?” doesn’t matter, without the bios security implementation (which most probably would not be implemented), all the files can be recovered without any login made to the Login Screen.&lt;/p&gt;&#xA;&lt;p&gt;This goes with the story of me trying to get my Wi-Fi troubleshooting in Arch Linux where I was trying to upgrade the Kernel of my System to get the Wi-Fi working properly (as mentioned in the previous blog. By the way, I got the Wi-Fi working). I used an Arch Installation medium to get into the system and extract all my backup data into a USB.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
